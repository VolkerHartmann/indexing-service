import java.text.SimpleDateFormat

ext {
   snippetsDir = file("build/generated-snippets")
}
   
asciidoctor {
  attributes "snippets": snippetsDir,
            "version": jar.version,
            "date": new SimpleDateFormat("yyyy-MM-dd").format(new Date())
   inputs.dir snippetsDir
   dependsOn test  
   sourceDir "docs/"
   outputDir "build/docs"
}


task prepareElastic(type:Exec) {
  println 'Start elasticsearch container'
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    println '##################################################################'
    println 'ATTENTION: Please start elasticsearch by your own!'
    println '##################################################################'
  } else {
    commandLine "bash", "./manageIndexingFramework.sh", "test"
  }
}

task stopElastic(type:Exec) {
  println 'Stop elasticsearch container'
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    println '##################################################################'
    println 'ATTENTION: Please stop elasticsearch by your own!'
    println '##################################################################'
  } else {
    commandLine "bash", "./manageIndexingFramework.sh", "stop_test"
  }
}

test {
    dependsOn prepareElastic
    finalizedBy stopElastic, jacocoTestReport
    environment "spring.config.location", "classpath:/test-config/"

    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

test {
   outputs.dir snippetsDir
   environment "spring.config.location", "classpath:/config/"
}

// Generate coverage report
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
    }
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
            }))
    }
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}
   
bootJar {
   manifest {
      attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
   }
   dependsOn asciidoctor
   from ("${asciidoctor.outputDir}/html5") {
      into 'static/docs'
   }
   launchScript()
}
 
release {
    tagTemplate = 'v${version}'
    git {
        requireBranch.set('main|master')
    }
}
